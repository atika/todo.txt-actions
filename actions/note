#!/bin/bash

TODO_NOTES_DIR=${TODO_NOTES_DIR:-$TODO_DIR/notes}
TODO_NOTE_TAG=${TODO_NOTE_TAG:-note}
TODO_NOTE_TEMPLATE=${TODO_NOTE_TEMPLATE:-XXX}
TODO_NOTE_EXT=${TODO_NOTE_EXT:-.txt}
TODO_NOTE_ARCHIVE="$TODO_NOTES_DIR/archive" # $TODO_NOTE_EXT
TODO_NOTE_TRASH="$TODO_NOTES_DIR/trash"
TODO_NOTE_FILTER="${TODO_NOTE_FILTER:-cat}"
TODO_NOTE_EDITOR="${TODO_NOTE_EDITOR:-$EDITOR}"

usage() {
    local cmdname=`basename $0`
    case $cmdname in
        archive)
            echo "    archive"
            echo "      Moves all done tasks from todo.txt to done.txt and removes blank lines."
            ;;
        del|rm)
            echo "    del|rm ITEM# [TERM]"
            echo "      Deletes the task on line ITEM# in todo.txt."
            echo "      If TERM specified, deletes only TERM from the task."
            ;;
        *)
            echo "    $cmdname add|a ITEM#"
            echo "      Adds a note to the task on line ITEM#."
            echo "    $cmdname edit|e [archive|a] ITEM#"
            echo "      Opens in EDITOR the note related with the task on line ITEM# or the notes archive."
            echo "    $cmdname show|s [archive|a] ITEM#"
            echo "      Shows the note related with the task on line ITEM# or the notes archive."
            echo "    $cmdname list|ls"
            echo "      List all notes files and corresponding task line."
            ;;
    esac
}

getnotenamefromnumber() {
    # Parameters:
    #    $1: task number
    # Preconditions:
    #   $errmsg contains usage message.
    # Postcondition:
    #     $notename contains note name, if task has note.
    #     $item contains the task name

    item="$1"
    file="$2"

    getTodo "$item" "$file"
    getnotenamefromtext "$todo"
}

getnotenamefromtext() {
    # Parameters: $1: task text
    # Preconditions: none
    # Postcondition:
    #     $notename contains note name, if task has note.

    # notename=$(echo "$1" | grep -o " $TODO_NOTE_TAG:[^ .]*${TODO_NOTE_EXT}" | grep -o "[^:]*${TODO_NOTE_EXT}")
    notename=$(grep -o " $TODO_NOTE_TAG:[^ ]*" <<< "$1" | sed 's/[[:space:]]'$TODO_NOTE_TAG'://')
    if [[ ! -z ${notename} ]] && [[ ${notename} == ${notename%.*} ]] # no extensions
    then
        notename=`ls {"$TODO_NOTES_DIR","$TODO_NOTE_ARCHIVE"}"/${notename}"* 2>/dev/null | head -n1`
        notename=${notename##*/}
    fi
}

editnote() {
    # Parameter:: $1: Path of the file to edit
    # Preconditions: none
    # Postcondition: none
    if [ "$TODO_NOTE_EDITOR" ]
    then
        $TODO_NOTE_EDITOR "$1"
    else
        echo The EDITOR environment variable is not set.
    fi

}

getnotefilepath () {
    # Parameter:: $1: Task number or reference to file
    # Preconditions:
    # Postcondition: $notefilepath contains the path of the file to edit or show

    item="$1"
    local notes_dir="$TODO_NOTES_DIR"

    if [[ "$item" ]] && [[ archive =~ ^${item}.*$ ]]
    then
        shift
        from="$DONE_FILE"
        notes_dir="$TODO_NOTE_ARCHIVE"
    fi

    getnotenamefromnumber $1 $from

    if [ $notename ]
    then
        notefilepath="$notes_dir/${notename}"
    else
        die "TODO: Task $item has no note."
    fi
}

__archive () {
    getnotenamefromtext "$*"

    if [ $notename ]
    then
        mkdir -p "$TODO_NOTE_ARCHIVE"
        mv "$TODO_NOTES_DIR/${notename}" "$TODO_NOTE_ARCHIVE" 2>/dev/null
    fi
}

__rmfromtext () {
    getnotenamefromtext "$*"

    if [ $notename ]
    then
        mkdir -p "$TODO_NOTE_TRASH"
        mv "$TODO_NOTES_DIR/${notename}" "$TODO_NOTE_TRASH" 2>/dev/null
    fi
}

TODO_NOTE_CMD=$1
shift
TODO_NOTE_ACTION=$1
shift

case $TODO_NOTE_CMD in
    usage)
        usage
        exit 0
        ;;
    archive)
        while read -r line
        do
            __archive $line
        done < <(grep "^x" "$TODO_FILE")
        "$TODO_SH" command archive
        exit 0
        ;;
    del|rm)
        item=$TODO_NOTE_ACTION
        term="$1" # $3 shift shift

        [ -z "$term" ] && getTodo "$item" # Take into account "del #ITEM TERM"

        "$TODO_SH" command del $item $term

        if [ $? -eq 0 ] && [ -z "$term" ]
        then
            newtodo=$(sed "$item!d" "$TODO_FILE")
            if [ "$todo" != "$newtodo" ]
            then
                __rmfromtext "DDDD$todo"
            fi
        fi
        exit 0
        ;;
esac

case "$TODO_NOTE_ACTION" in
"add" | "a")
    errmsg="usage: $TODO_SH $(basename $0) $TODO_NOTE_ACTION ITEM#"
    getnotenamefromnumber $1

    [ $notename ] && die "TODO: Task $item already has a note."

    # Create notes directory if doesn't exist
    [ -d "$TODO_NOTES_DIR" ]  || mkdir -p "$TODO_NOTES_DIR" 2> /dev/null || die "Error: $TODO_NOTES_DIR is not a directory"

    # Create file
    filename=$(mktemp "$TODO_NOTES_DIR/${TODO_NOTE_TEMPLATE}")
    notename=$(basename "$filename${TODO_NOTE_EXT}")
    title=$(echo "$todo" | sed -e "s/^\(x ....-..-.. \)\?//" -e "s/^(.) \?//")
    echo \# $title > "$TODO_NOTES_DIR/${notename}"
    # remove temp file created
    rm -f "${filename}"

    # Append note tag to task
    sed -i.bak $item" s/$/ ${TODO_NOTE_TAG}:$notename/" "$TODO_FILE"

    getTodo "$item"
    echo $item $todo
    echo TODO: Note added to task $item.

    echo "Edit note?  (y/n)"
    read ANSWER
    if [ "$ANSWER" = "y" ]
    then
        editnote "$TODO_NOTES_DIR/${notename}"
    fi
    ;;

"edit" | "e")
    errmsg="usage: $TODO_SH $(basename $0) edit|e ITEM#|archive|a"
    getnotefilepath $*
    editnote "$notefilepath"
    ;;

"show" | "s")
    errmsg="usage: $TODO_SH $(basename $0) show|s ITEM#|archive|a"
    getnotefilepath $*
    cat "$notefilepath" | ${TODO_NOTE_FILTER}
    ;;

"list" | "ls")
    LS_TITLE=("NOTES" "ARCHIVE" "TRASH")
    LS_PATHS=("$TODO_NOTES_DIR" "$TODO_NOTE_ARCHIVE" "$TODO_NOTE_TRASH")
    LS_FILES=("$TODO_FILE" "$DONE_FILE" "")
    SPACE="  "
    [ $TODOTXT_PLAIN = 0 ] && LS_COLOR=("$LIGHT_CYAN" "$PURPLE" "$RED" "$LIGHT_BLACK")

    export HIDE_PRIORITY_SUBSTITUTION="([A-Z])[[:space:]]"

    for i in 0 1 2
    do
        title=${LS_TITLE[$i]}; path=${LS_PATHS[$i]}; file=${LS_FILES[$i]}; color=${LS_COLOR[$i]};

        filelist=`ls -dp -1 "${path}/"* 2>/dev/null | grep -v '/$'`

        echo -e "${LS_COLOR[3]/\\/}+ ${color/\\/}${title}${DEFAULT/\\/}"
        {
            [[ ! -z ${file} ]] && \
            while read -r task
            do
                note=$(sed 's/^.*note:\([a-zA-Z0-9.]\{1,\}\).*$/\1/' <<< "$task")

                # print the note file path (and remove from the list)
                if [[ ${filelist} == *"$note"* ]]
                then
                    echo -n "${SPACE}`grep $note <<< "$filelist"`  *  "
                    filelist=`grep -v $note <<< "$filelist"`
                else
                    echo -n "${SPACE}-  *  "
                fi

                # print the task (remove meta, dates, etc)
                echo "$task" | sed -e 's/\ *[[:cntrl:]\[;a-z0-9]\{1,\}:[^ [:cntrl:]]\{1,\}//g' \
                        -e 's/\ *[^ ]*[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}[^ ]*//g' \
                        -e 's/ x / /g'

            done < <(_list $file | grep note)

            # Orphan note files
            [[ ! -z $filelist ]] && sed -e "s/^/${SPACE}/" -e 's/$/*  -/' <<< "$filelist"

        } | grep --color=never . || echo "${SPACE}<nothing there>"
        echo ' * '
    done | column -t -s'*'
    ;;
*)
    usage
    ;;
esac
